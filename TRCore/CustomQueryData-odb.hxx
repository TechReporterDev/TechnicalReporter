// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CUSTOM_QUERY_DATA_ODB_HXX
#define CUSTOM_QUERY_DATA_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/mysql/gregorian-traits.hxx>
#include <odb/boost/date-time/mysql/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/mysql/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "CustomQueryData.hxx"

#include "BasisValues-odb.hxx"
#include "RegistryValues-odb.hxx"
#include "ServicesValues-odb.hxx"
#include "Values-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // CustomQueryData
  //
  template <>
  struct class_traits< ::TR::Core::CustomQueryData >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::TR::Core::CustomQueryData >
  {
    public:
    typedef ::TR::Core::CustomQueryData object_type;
    typedef ::boost::shared_ptr< ::TR::Core::CustomQueryData > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::TR::Core::Key id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // CustomQueryData
  //
  template <typename A>
  struct query_columns< ::TR::Core::CustomQueryData, id_mysql, A >
  {
    // key
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::TR::Core::Key,
        mysql::id_long >::query_type,
      mysql::id_long >
    key_type_;

    static const key_type_ key;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // query_doc
    //
    struct query_doc_class_
    {
      query_doc_class_ ()
      {
      }

      // value
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::basic_string< char >,
          mysql::id_string >::query_type,
        mysql::id_string >
      value_type_;

      static const value_type_ value;
    };

    static const query_doc_class_ query_doc;

    // query_def
    //
    struct query_def_class_
    {
      query_def_class_ ()
      {
      }

      // value
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::basic_string< char >,
          mysql::id_string >::query_type,
        mysql::id_string >
      value_type_;

      static const value_type_ value;
    };

    static const query_def_class_ query_def;

    // output_uuid
    //
    struct output_uuid_class_
    {
      output_uuid_class_ ()
      {
      }

      // value
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::boost::uuids::uuid,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      value_type_;

      static const value_type_ value;
    };

    static const output_uuid_class_ output_uuid;

    // output_def
    //
    struct output_def_class_
    {
      output_def_class_ ()
      {
      }

      // value
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::basic_string< char >,
          mysql::id_string >::query_type,
        mysql::id_string >
      value_type_;

      static const value_type_ value;
    };

    static const output_def_class_ output_def;

    // output_traits
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    output_traits_type_;

    static const output_traits_type_ output_traits;
  };

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::key_type_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::
  key (A::table_name, "`key`", 0);

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::name_type_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::query_doc_class_::value_type_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::query_doc_class_::
  value (A::table_name, "`query_doc_value`", 0);

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::query_doc_class_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::query_doc;

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::query_def_class_::value_type_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::query_def_class_::
  value (A::table_name, "`query_def_value`", 0);

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::query_def_class_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::query_def;

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_uuid_class_::value_type_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_uuid_class_::
  value (A::table_name, "`output_uuid_value`", 0);

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_uuid_class_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_uuid;

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_def_class_::value_type_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_def_class_::
  value (A::table_name, "`output_def_value`", 0);

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_def_class_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_def;

  template <typename A>
  const typename query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::output_traits_type_
  query_columns< ::TR::Core::CustomQueryData, id_mysql, A >::
  output_traits (A::table_name, "`output_traits`", 0);

  template <typename A>
  struct pointer_query_columns< ::TR::Core::CustomQueryData, id_mysql, A >:
    query_columns< ::TR::Core::CustomQueryData, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::TR::Core::CustomQueryData, id_mysql >:
    public access::object_traits< ::TR::Core::CustomQueryData >
  {
    public:
    struct id_image_type
    {
      int id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // m_key
      //
      int m_key_value;
      my_bool m_key_null;

      // m_name
      //
      details::buffer m_name_value;
      unsigned long m_name_size;
      my_bool m_name_null;

      // m_query_doc
      //
      composite_value_traits< ::TR::Core::XmlQueryDocText, id_mysql >::image_type m_query_doc_value;

      // m_query_def
      //
      composite_value_traits< ::TR::Core::XmlDefDocText, id_mysql >::image_type m_query_def_value;

      // m_output_uuid
      //
      composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::image_type m_output_uuid_value;

      // m_output_def
      //
      composite_value_traits< ::TR::Core::XmlDefDocText, id_mysql >::image_type m_output_def_value;

      // m_output_traits
      //
      int m_output_traits_value;
      my_bool m_output_traits_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // m_input_uuids
    //
    struct input_uuids_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::TR::Core::ReportTypeUUID > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< input_uuids_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::TR::Core::CustomQueryData, id_common >:
    public access::object_traits_impl< ::TR::Core::CustomQueryData, id_mysql >
  {
  };

  // CustomQueryData
  //
}

#include "CustomQueryData-odb.ixx"

#include <odb/post.hxx>

#endif // CUSTOM_QUERY_DATA_ODB_HXX
