// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
}

namespace odb
{
  // QueryJoiningKey
  //

  inline
  bool access::composite_value_traits< ::TR::Core::QueryJoiningKey, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::get_null (i);
    return r;
  }

  inline
  void access::composite_value_traits< ::TR::Core::QueryJoiningKey, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::set_null (i, sk);
  }

  // ComplianceKey
  //

  inline
  bool access::composite_value_traits< ::TR::Core::ComplianceKey, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::get_null (i);
    return r;
  }

  inline
  void access::composite_value_traits< ::TR::Core::ComplianceKey, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::set_null (i, sk);
  }

  // ValidationKey
  //

  inline
  bool access::composite_value_traits< ::TR::Core::ValidationKey, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::get_null (i);
    return r;
  }

  inline
  void access::composite_value_traits< ::TR::Core::ValidationKey, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::set_null (i, sk);
  }

  // ArchivedReportKey
  //

  inline
  bool access::composite_value_traits< ::TR::Core::ArchivedReportKey, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::get_null (i);
    return r;
  }

  inline
  void access::composite_value_traits< ::TR::Core::ArchivedReportKey, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::set_null (i, sk);
  }
}

