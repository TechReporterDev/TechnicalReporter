// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // QueryJoiningData
  //

  inline
  access::object_traits< ::TR::Core::QueryJoiningData >::id_type
  access::object_traits< ::TR::Core::QueryJoiningData >::
  id (const object_type& o)
  {
    return o.m_key;
  }

  inline
  void access::object_traits< ::TR::Core::QueryJoiningData >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::TR::Core::QueryJoiningData >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SubjectQueryData
  //

  inline
  access::object_traits< ::TR::Core::SubjectQueryData >::id_type
  access::object_traits< ::TR::Core::SubjectQueryData >::
  id (const object_type& o)
  {
    return o.m_identity;
  }

  inline
  void access::object_traits< ::TR::Core::SubjectQueryData >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::TR::Core::SubjectQueryData >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SubjectQueryView
  //

  inline
  void access::view_traits< ::TR::Core::SubjectQueryView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SubjectJoinedQueryData
  //

  inline
  access::object_traits< ::TR::Core::SubjectJoinedQueryData >::id_type
  access::object_traits< ::TR::Core::SubjectJoinedQueryData >::
  id (const object_type& o)
  {
    return o.m_identity;
  }

  inline
  void access::object_traits< ::TR::Core::SubjectJoinedQueryData >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::TR::Core::SubjectJoinedQueryData >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SubjectJoinedQueryView
  //

  inline
  void access::view_traits< ::TR::Core::SubjectJoinedQueryView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // QueryJoiningData
  //

  inline
  void access::object_traits_impl< ::TR::Core::QueryJoiningData, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::TR::Core::QueryJoiningData, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // SubjectQueryIdentity
  //

  inline
  bool access::composite_value_traits< ::TR::Core::SubjectQueryIdentity, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && composite_value_traits< ::TR::Core::SubjectIdentity, id_mysql >::get_null (i.m_subject_value);
    r = r && composite_value_traits< ::TR::Core::QueryJoiningKey, id_mysql >::get_null (i.m_query_joining_key_value);
    return r;
  }

  inline
  void access::composite_value_traits< ::TR::Core::SubjectQueryIdentity, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    composite_value_traits< ::TR::Core::SubjectIdentity, id_mysql >::set_null (i.m_subject_value, sk);
    composite_value_traits< ::TR::Core::QueryJoiningKey, id_mysql >::set_null (i.m_query_joining_key_value, sk);
  }

  // SubjectQueryData
  //

  inline
  void access::object_traits_impl< ::TR::Core::SubjectQueryData, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::TR::Core::SubjectQueryData, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // SubjectQueryView
  //

  // SubjectJoinedQueryData
  //

  inline
  void access::object_traits_impl< ::TR::Core::SubjectJoinedQueryData, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::TR::Core::SubjectJoinedQueryData, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // SubjectJoinedQueryView
  //
}

