// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "BasisValues-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // ReportTypeUUID
  //

  bool access::composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // UUIDRestriction base
    //
    if (composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::grow (
          i, t + 0UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // UUIDRestriction base
    //
    composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::bind (b + n, i, sk);
    n += 1UL;
  }

  bool access::composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // UUIDRestriction base
    //
    if (composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::init (i, o, sk))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // UUIDRestriction base
    //
    composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::init (o, i, db);
  }

  // StreamTypeUUID
  //

  bool access::composite_value_traits< ::TR::Core::StreamTypeUUID, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // UUIDRestriction base
    //
    if (composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::grow (
          i, t + 0UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::StreamTypeUUID, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // UUIDRestriction base
    //
    composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::bind (b + n, i, sk);
    n += 1UL;
  }

  bool access::composite_value_traits< ::TR::Core::StreamTypeUUID, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // UUIDRestriction base
    //
    if (composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::init (i, o, sk))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::StreamTypeUUID, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // UUIDRestriction base
    //
    composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::init (o, i, db);
  }

  // SourceTypeUUID
  //

  bool access::composite_value_traits< ::TR::Core::SourceTypeUUID, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // UUIDRestriction base
    //
    if (composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::grow (
          i, t + 0UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::SourceTypeUUID, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // UUIDRestriction base
    //
    composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::bind (b + n, i, sk);
    n += 1UL;
  }

  bool access::composite_value_traits< ::TR::Core::SourceTypeUUID, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // UUIDRestriction base
    //
    if (composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::init (i, o, sk))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::SourceTypeUUID, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // UUIDRestriction base
    //
    composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::init (o, i, db);
  }

  // ActionUUID
  //

  bool access::composite_value_traits< ::TR::Core::ActionUUID, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // UUIDRestriction base
    //
    if (composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::grow (
          i, t + 0UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::ActionUUID, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // UUIDRestriction base
    //
    composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::bind (b + n, i, sk);
    n += 1UL;
  }

  bool access::composite_value_traits< ::TR::Core::ActionUUID, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // UUIDRestriction base
    //
    if (composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::init (i, o, sk))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::ActionUUID, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // UUIDRestriction base
    //
    composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::init (o, i, db);
  }

  // ResourceIdentity
  //

  bool access::composite_value_traits< ::TR::Core::ResourceIdentity, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_value1
    //
    if (composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::grow (
          i.m_value1_value, t + 0UL))
      grew = true;

    // m_value2
    //
    if (composite_value_traits< ::TR::Core::StreamTypeUUID, id_mysql >::grow (
          i.m_value2_value, t + 1UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::ResourceIdentity, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // m_value1
    //
    composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::bind (
      b + n, i.m_value1_value, sk);
    n += 1UL;

    // m_value2
    //
    composite_value_traits< ::TR::Core::StreamTypeUUID, id_mysql >::bind (
      b + n, i.m_value2_value, sk);
    n += 1UL;
  }

  bool access::composite_value_traits< ::TR::Core::ResourceIdentity, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // m_value1
    //
    {
      ::TR::Core::ReportTypeUUID const& v =
        o.m_value1;

      if (composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::init (
            i.m_value1_value,
            v,
            sk))
        grew = true;
    }

    // m_value2
    //
    {
      ::TR::Core::StreamTypeUUID const& v =
        o.m_value2;

      if (composite_value_traits< ::TR::Core::StreamTypeUUID, id_mysql >::init (
            i.m_value2_value,
            v,
            sk))
        grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::ResourceIdentity, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_value1
    //
    {
      ::TR::Core::ReportTypeUUID& v =
        o.m_value1;

      composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::init (
        v,
        i.m_value1_value,
        db);
    }

    // m_value2
    //
    {
      ::TR::Core::StreamTypeUUID& v =
        o.m_value2;

      composite_value_traits< ::TR::Core::StreamTypeUUID, id_mysql >::init (
        v,
        i.m_value2_value,
        db);
    }
  }
}

#include <odb/post.hxx>
