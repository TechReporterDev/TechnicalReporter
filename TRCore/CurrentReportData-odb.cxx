// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "CurrentReportData-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // CurrentReportIdentity
  //

  bool access::composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_source_key
    //
    if (composite_value_traits< ::TR::Core::SourceKey, id_mysql >::grow (
          i.m_source_key_value, t + 0UL))
      grew = true;

    // m_report_type_uuid
    //
    if (composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::grow (
          i.m_report_type_uuid_value, t + 1UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // m_source_key
    //
    composite_value_traits< ::TR::Core::SourceKey, id_mysql >::bind (
      b + n, i.m_source_key_value, sk);
    n += 1UL;

    // m_report_type_uuid
    //
    composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::bind (
      b + n, i.m_report_type_uuid_value, sk);
    n += 1UL;
  }

  bool access::composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // m_source_key
    //
    {
      ::TR::Core::SourceKey const& v =
        o.m_source_key;

      composite_value_traits< ::TR::Core::SourceKey, id_mysql >::init (
        i.m_source_key_value,
        v,
        sk);
    }

    // m_report_type_uuid
    //
    {
      ::TR::Core::ReportTypeUUID const& v =
        o.m_report_type_uuid;

      if (composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::init (
            i.m_report_type_uuid_value,
            v,
            sk))
        grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_source_key
    //
    {
      ::TR::Core::SourceKey& v =
        o.m_source_key;

      composite_value_traits< ::TR::Core::SourceKey, id_mysql >::init (
        v,
        i.m_source_key_value,
        db);
    }

    // m_report_type_uuid
    //
    {
      ::TR::Core::ReportTypeUUID& v =
        o.m_report_type_uuid;

      composite_value_traits< ::TR::Core::ReportTypeUUID, id_mysql >::init (
        v,
        i.m_report_type_uuid_value,
        db);
    }
  }

  // TransformationCircumstancesData
  //

  // m_input_uuids
  //

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = d.value_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      d.value_value.capacity ());
    b[n].length = &d.value_size;
    b[n].is_null = &d.value_null;
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (t[1UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace mysql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      mysql::value_traits<
          index_type,
          mysql::id_ulonglong >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.value_value.capacity ());
      mysql::value_traits<
          value_type,
          mysql::id_blob >::set_image (
        i.value_value,
        size,
        is_null,
        v);
      i.value_null = is_null;
      i.value_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.value_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      mysql::value_traits<
          index_type,
          mysql::id_ulonglong >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      mysql::value_traits<
          value_type,
          mysql::id_blob >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace mysql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  delete_ (void* d)
  {
    using namespace mysql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace mysql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace mysql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::input_uuids_traits::
  erase (statements_type& sts)
  {
    using namespace mysql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  bool access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_transformation_uuid
    //
    if (t[0UL])
    {
      i.m_transformation_uuid_value.capacity (i.m_transformation_uuid_size);
      grew = true;
    }

    // m_setup_uuid
    //
    if (t[1UL])
    {
      i.m_setup_uuid_value.capacity (i.m_setup_uuid_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // m_transformation_uuid
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.m_transformation_uuid_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_transformation_uuid_value.capacity ());
    b[n].length = &i.m_transformation_uuid_size;
    b[n].is_null = &i.m_transformation_uuid_null;
    n++;

    // m_setup_uuid
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.m_setup_uuid_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_setup_uuid_value.capacity ());
    b[n].length = &i.m_setup_uuid_size;
    b[n].is_null = &i.m_setup_uuid_null;
    n++;
  }

  bool access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // m_transformation_uuid
    //
    {
      ::TR::Core::UUID const& v =
        o.m_transformation_uuid;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.m_transformation_uuid_value.capacity ());
      mysql::value_traits<
          ::TR::Core::UUID,
          mysql::id_blob >::set_image (
        i.m_transformation_uuid_value,
        size,
        is_null,
        v);
      i.m_transformation_uuid_null = is_null;
      i.m_transformation_uuid_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_transformation_uuid_value.capacity ());
    }

    // m_setup_uuid
    //
    {
      ::TR::Core::UUID const& v =
        o.m_setup_uuid;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.m_setup_uuid_value.capacity ());
      mysql::value_traits<
          ::TR::Core::UUID,
          mysql::id_blob >::set_image (
        i.m_setup_uuid_value,
        size,
        is_null,
        v);
      i.m_setup_uuid_null = is_null;
      i.m_setup_uuid_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_setup_uuid_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_transformation_uuid
    //
    {
      ::TR::Core::UUID& v =
        o.m_transformation_uuid;

      mysql::value_traits<
          ::TR::Core::UUID,
          mysql::id_blob >::set_value (
        v,
        i.m_transformation_uuid_value,
        i.m_transformation_uuid_size,
        i.m_transformation_uuid_null);
    }

    // m_setup_uuid
    //
    {
      ::TR::Core::UUID& v =
        o.m_setup_uuid;

      mysql::value_traits<
          ::TR::Core::UUID,
          mysql::id_blob >::set_value (
        v,
        i.m_setup_uuid_value,
        i.m_setup_uuid_size,
        i.m_setup_uuid_null);
    }
  }

  // CurrentReportData
  //

  struct access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::extra_statement_cache_type
  {
    mysql::container_statements_impl< transformation_circumstances_input_uuids_traits > transformation_circumstances_m_input_uuids;

    extra_statement_cache_type (
      mysql::connection& c,
      image_type&,
      id_image_type&,
      mysql::binding& id,
      mysql::binding&)
    : transformation_circumstances_m_input_uuids (c, id)
    {
    }
  };

  // m_input_uuids
  //

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::transformation_circumstances_input_uuids_traits::
  select_statement[] =
  "SELECT "
  "`CurrentReportData_transformation_circumstances_input_uuids`.`index`, "
  "`CurrentReportData_transformation_circumstances_input_uuids`.`value` "
  "FROM `CurrentReportData_transformation_circumstances_input_uuids` "
  "WHERE `CurrentReportData_transformation_circumstances_input_uuids`.`object_id_source_key_value`=? AND `CurrentReportData_transformation_circumstances_input_uuids`.`object_id_report_type_uuid_value`=? ORDER BY `CurrentReportData_transformation_circumstances_input_uuids`.`index`";

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::transformation_circumstances_input_uuids_traits::
  insert_statement[] =
  "INSERT INTO `CurrentReportData_transformation_circumstances_input_uuids` "
  "(`object_id_source_key_value`, "
  "`object_id_report_type_uuid_value`, "
  "`index`, "
  "`value`) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::transformation_circumstances_input_uuids_traits::
  delete_statement[] =
  "DELETE FROM `CurrentReportData_transformation_circumstances_input_uuids` "
  "WHERE `object_id_source_key_value`=? AND `object_id_report_type_uuid_value`=?";

  access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::id_type
  access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::init (
        id,
        i.m_identity_value,
        db);
    }

    return id;
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_identity
    //
    if (composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::grow (
          i.m_identity_value, t + 0UL))
      grew = true;

    // m_diff
    //
    if (t[2UL])
    {
      i.m_diff_value.capacity (i.m_diff_size);
      grew = true;
    }

    // m_time
    //
    t[3UL] = 0;

    // m_check_time
    //
    t[4UL] = 0;

    // m_uuid
    //
    if (t[5UL])
    {
      i.m_uuid_value.capacity (i.m_uuid_size);
      grew = true;
    }

    // m_transformation_circumstances
    //
    if (composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::grow (
          i.m_transformation_circumstances_value, t + 6UL))
      grew = true;

    return grew;
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // m_identity
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::bind (
        b + n, i.m_identity_value, sk);
      n += 2UL;
    }

    // m_diff
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.m_diff_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_diff_value.capacity ());
    b[n].length = &i.m_diff_size;
    b[n].is_null = &i.m_diff_null;
    n++;

    // m_time
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_time_value;
    b[n].is_null = &i.m_time_null;
    n++;

    // m_check_time
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_check_time_value;
    b[n].is_null = &i.m_check_time_null;
    n++;

    // m_uuid
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.m_uuid_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_uuid_value.capacity ());
    b[n].length = &i.m_uuid_size;
    b[n].is_null = &i.m_uuid_null;
    n++;

    // m_transformation_circumstances
    //
    composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::bind (
      b + n, i.m_transformation_circumstances_value, sk);
    n += 2UL;
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    mysql::statement_kind sk (mysql::statement_select);
    composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::bind (
      b + n, i.id_value, sk);
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // m_identity
    //
    if (sk == statement_insert)
    {
      ::TR::Core::CurrentReportIdentity const& v =
        o.m_identity;

      if (composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::init (
            i.m_identity_value,
            v,
            sk))
        grew = true;
    }

    // m_diff
    //
    {
      ::boost::optional< ::std::vector< char > > const& v =
        o.m_diff;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.m_diff_value.capacity ());
      mysql::value_traits<
          ::boost::optional< ::std::vector< char > >,
          mysql::id_blob >::set_image (
        i.m_diff_value,
        size,
        is_null,
        v);
      i.m_diff_null = is_null;
      i.m_diff_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_diff_value.capacity ());
    }

    // m_time
    //
    {
      ::time_t const& v =
        o.m_time;

      bool is_null (false);
      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_image (
        i.m_time_value, is_null, v);
      i.m_time_null = is_null;
    }

    // m_check_time
    //
    {
      ::time_t const& v =
        o.m_check_time;

      bool is_null (false);
      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_image (
        i.m_check_time_value, is_null, v);
      i.m_check_time_null = is_null;
    }

    // m_uuid
    //
    {
      ::TR::Core::UUID const& v =
        o.m_uuid;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.m_uuid_value.capacity ());
      mysql::value_traits<
          ::TR::Core::UUID,
          mysql::id_blob >::set_image (
        i.m_uuid_value,
        size,
        is_null,
        v);
      i.m_uuid_null = is_null;
      i.m_uuid_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_uuid_value.capacity ());
    }

    // m_transformation_circumstances
    //
    {
      ::TR::Core::TransformationCircumstancesData const& v =
        o.m_transformation_circumstances;

      if (composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::init (
            i.m_transformation_circumstances_value,
            v,
            sk))
        grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_identity
    //
    {
      ::TR::Core::CurrentReportIdentity& v =
        o.m_identity;

      composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::init (
        v,
        i.m_identity_value,
        db);
    }

    // m_diff
    //
    {
      ::boost::optional< ::std::vector< char > >& v =
        o.m_diff;

      mysql::value_traits<
          ::boost::optional< ::std::vector< char > >,
          mysql::id_blob >::set_value (
        v,
        i.m_diff_value,
        i.m_diff_size,
        i.m_diff_null);
    }

    // m_time
    //
    {
      ::time_t& v =
        o.m_time;

      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_value (
        v,
        i.m_time_value,
        i.m_time_null);
    }

    // m_check_time
    //
    {
      ::time_t& v =
        o.m_check_time;

      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_value (
        v,
        i.m_check_time_value,
        i.m_check_time_null);
    }

    // m_uuid
    //
    {
      ::TR::Core::UUID& v =
        o.m_uuid;

      mysql::value_traits<
          ::TR::Core::UUID,
          mysql::id_blob >::set_value (
        v,
        i.m_uuid_value,
        i.m_uuid_size,
        i.m_uuid_null);
    }

    // m_transformation_circumstances
    //
    {
      ::TR::Core::TransformationCircumstancesData& v =
        o.m_transformation_circumstances;

      composite_value_traits< ::TR::Core::TransformationCircumstancesData, id_mysql >::init (
        v,
        i.m_transformation_circumstances_value,
        db);
    }
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    mysql::statement_kind sk (mysql::statement_select);
    {
      if (composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::init (
            i.id_value,
            id,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::persist_statement[] =
  "INSERT INTO `CurrentReportData` "
  "(`identity_source_key_value`, "
  "`identity_report_type_uuid_value`, "
  "`diff`, "
  "`time`, "
  "`check_time`, "
  "`uuid`, "
  "`transformation_circumstances_transformation_uuid`, "
  "`transformation_circumstances_setup_uuid`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::find_statement[] =
  "SELECT "
  "`CurrentReportData`.`identity_source_key_value`, "
  "`CurrentReportData`.`identity_report_type_uuid_value`, "
  "`CurrentReportData`.`diff`, "
  "`CurrentReportData`.`time`, "
  "`CurrentReportData`.`check_time`, "
  "`CurrentReportData`.`uuid`, "
  "`CurrentReportData`.`transformation_circumstances_transformation_uuid`, "
  "`CurrentReportData`.`transformation_circumstances_setup_uuid` "
  "FROM `CurrentReportData` "
  "WHERE `CurrentReportData`.`identity_source_key_value`=? AND `CurrentReportData`.`identity_report_type_uuid_value`=?";

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::update_statement[] =
  "UPDATE `CurrentReportData` "
  "SET "
  "`diff`=?, "
  "`time`=?, "
  "`check_time`=?, "
  "`uuid`=?, "
  "`transformation_circumstances_transformation_uuid`=?, "
  "`transformation_circumstances_setup_uuid`=? "
  "WHERE `identity_source_key_value`=? AND `identity_report_type_uuid_value`=?";

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::erase_statement[] =
  "DELETE FROM `CurrentReportData` "
  "WHERE `identity_source_key_value`=? AND `identity_report_type_uuid_value`=?";

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::query_statement[] =
  "SELECT "
  "`CurrentReportData`.`identity_source_key_value`, "
  "`CurrentReportData`.`identity_report_type_uuid_value`, "
  "`CurrentReportData`.`diff`, "
  "`CurrentReportData`.`time`, "
  "`CurrentReportData`.`check_time`, "
  "`CurrentReportData`.`uuid`, "
  "`CurrentReportData`.`transformation_circumstances_transformation_uuid`, "
  "`CurrentReportData`.`transformation_circumstances_setup_uuid` "
  "FROM `CurrentReportData`";

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::erase_query_statement[] =
  "DELETE FROM `CurrentReportData`";

  const char access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::table_name[] =
  "`CurrentReportData`";

  void access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    id_image_type& i (sts.id_image ());
    init (i, obj.m_identity);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // m_transformation_circumstances.m_input_uuids
    //
    {
      ::std::vector< ::boost::uuids::uuid > const& v =
        obj.m_transformation_circumstances.m_input_uuids;

      transformation_circumstances_input_uuids_traits::persist (
        v,
        esc.transformation_circumstances_m_input_uuids);
    }

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.m_identity);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // m_transformation_circumstances.m_input_uuids
    //
    {
      ::std::vector< ::boost::uuids::uuid > const& v =
        obj.m_transformation_circumstances.m_input_uuids;

      transformation_circumstances_input_uuids_traits::update (
        v,
        esc.transformation_circumstances_m_input_uuids);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // m_transformation_circumstances.m_input_uuids
    //
    transformation_circumstances_input_uuids_traits::erase (
      esc.transformation_circumstances_m_input_uuids);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::pointer_type
  access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.m_identity);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // m_transformation_circumstances.m_input_uuids
    //
    {
      ::std::vector< ::boost::uuids::uuid >& v =
        obj.m_transformation_circumstances.m_input_uuids;

      transformation_circumstances_input_uuids_traits::load (
        v,
        esc.transformation_circumstances_m_input_uuids);
    }
  }

  result< access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::object_type >
  access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::TR::Core::CurrentReportData, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // CurrentReportContentData
  //

  struct access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::id_type
  access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::init (
        id,
        i.m_identity_value,
        db);
    }

    return id;
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_identity
    //
    if (composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::grow (
          i.m_identity_value, t + 0UL))
      grew = true;

    // m_content
    //
    if (t[2UL])
    {
      i.m_content_value.capacity (i.m_content_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // m_identity
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::bind (
        b + n, i.m_identity_value, sk);
      n += 2UL;
    }

    // m_content
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.m_content_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_content_value.capacity ());
    b[n].length = &i.m_content_size;
    b[n].is_null = &i.m_content_null;
    n++;
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    mysql::statement_kind sk (mysql::statement_select);
    composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::bind (
      b + n, i.id_value, sk);
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // m_identity
    //
    if (sk == statement_insert)
    {
      ::TR::Core::CurrentReportIdentity const& v =
        o.m_identity;

      if (composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::init (
            i.m_identity_value,
            v,
            sk))
        grew = true;
    }

    // m_content
    //
    {
      ::TR::Core::Blob const& v =
        o.m_content;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.m_content_value.capacity ());
      mysql::value_traits<
          ::TR::Core::Blob,
          mysql::id_blob >::set_image (
        i.m_content_value,
        size,
        is_null,
        v);
      i.m_content_null = is_null;
      i.m_content_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_content_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_identity
    //
    {
      ::TR::Core::CurrentReportIdentity& v =
        o.m_identity;

      composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::init (
        v,
        i.m_identity_value,
        db);
    }

    // m_content
    //
    {
      ::TR::Core::Blob& v =
        o.m_content;

      mysql::value_traits<
          ::TR::Core::Blob,
          mysql::id_blob >::set_value (
        v,
        i.m_content_value,
        i.m_content_size,
        i.m_content_null);
    }
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    mysql::statement_kind sk (mysql::statement_select);
    {
      if (composite_value_traits< ::TR::Core::CurrentReportIdentity, id_mysql >::init (
            i.id_value,
            id,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::persist_statement[] =
  "INSERT INTO `CurrentReportContentData` "
  "(`identity_source_key_value`, "
  "`identity_report_type_uuid_value`, "
  "`content`) "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::find_statement[] =
  "SELECT "
  "`CurrentReportContentData`.`identity_source_key_value`, "
  "`CurrentReportContentData`.`identity_report_type_uuid_value`, "
  "`CurrentReportContentData`.`content` "
  "FROM `CurrentReportContentData` "
  "WHERE `CurrentReportContentData`.`identity_source_key_value`=? AND `CurrentReportContentData`.`identity_report_type_uuid_value`=?";

  const char access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::update_statement[] =
  "UPDATE `CurrentReportContentData` "
  "SET "
  "`content`=? "
  "WHERE `identity_source_key_value`=? AND `identity_report_type_uuid_value`=?";

  const char access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::erase_statement[] =
  "DELETE FROM `CurrentReportContentData` "
  "WHERE `identity_source_key_value`=? AND `identity_report_type_uuid_value`=?";

  const char access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::query_statement[] =
  "SELECT "
  "`CurrentReportContentData`.`identity_source_key_value`, "
  "`CurrentReportContentData`.`identity_report_type_uuid_value`, "
  "`CurrentReportContentData`.`content` "
  "FROM `CurrentReportContentData`";

  const char access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::erase_query_statement[] =
  "DELETE FROM `CurrentReportContentData`";

  const char access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::table_name[] =
  "`CurrentReportContentData`";

  void access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.m_identity);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::pointer_type
  access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.m_identity);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::object_type >
  access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::TR::Core::CurrentReportContentData, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS `CurrentReportContentData`");
          db.execute ("DROP TABLE IF EXISTS `CurrentReportData_transformation_circumstances_input_uuids`");
          db.execute ("DROP TABLE IF EXISTS `CurrentReportData`");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE `CurrentReportData` (\n"
                      "  `identity_source_key_value` INT NOT NULL,\n"
                      "  `identity_report_type_uuid_value` BINARY(16) NOT NULL,\n"
                      "  `diff` LONGBLOB NULL,\n"
                      "  `time` BIGINT NOT NULL,\n"
                      "  `check_time` BIGINT NOT NULL,\n"
                      "  `uuid` BINARY(16) NULL,\n"
                      "  `transformation_circumstances_transformation_uuid` BINARY(16) NULL,\n"
                      "  `transformation_circumstances_setup_uuid` BINARY(16) NULL,\n"
                      "  PRIMARY KEY (`identity_source_key_value`,\n"
                      "               `identity_report_type_uuid_value`))\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `CurrentReportData_transformation_circumstances_input_uuids` (\n"
                      "  `object_id_source_key_value` INT NOT NULL,\n"
                      "  `object_id_report_type_uuid_value` BINARY(16) NOT NULL,\n"
                      "  `index` BIGINT UNSIGNED NOT NULL,\n"
                      "  `value` BINARY(16) NULL,\n"
                      "  CONSTRAINT `CurrentReportData_transformation_circumstances_input_uuids_objec`\n"
                      "    FOREIGN KEY (`object_id_source_key_value`,\n"
                      "                 `object_id_report_type_uuid_value`)\n"
                      "    REFERENCES `CurrentReportData` (`identity_source_key_value`,\n"
                      "                                    `identity_report_type_uuid_value`)\n"
                      "    ON DELETE CASCADE)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `object_id_i`\n"
                      "  ON `CurrentReportData_transformation_circumstances_input_uuids` (\n"
                      "    `object_id_source_key_value`,\n"
                      "    `object_id_report_type_uuid_value`)");
          db.execute ("CREATE INDEX `index_i`\n"
                      "  ON `CurrentReportData_transformation_circumstances_input_uuids` (`index`)");
          db.execute ("CREATE TABLE `CurrentReportContentData` (\n"
                      "  `identity_source_key_value` INT NOT NULL,\n"
                      "  `identity_report_type_uuid_value` BINARY(16) NOT NULL,\n"
                      "  `content` LONGBLOB NOT NULL,\n"
                      "  PRIMARY KEY (`identity_source_key_value`,\n"
                      "               `identity_report_type_uuid_value`))\n"
                      " ENGINE=InnoDB");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_mysql,
    "",
    &create_schema);
}

#include <odb/post.hxx>
