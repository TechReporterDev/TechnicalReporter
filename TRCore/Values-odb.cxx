// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Values-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // StringRestriction
  //

  bool access::composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_value
    //
    if (t[0UL])
    {
      i.m_value_value.capacity (i.m_value_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // m_value
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_value_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_value_value.capacity ());
    b[n].length = &i.m_value_size;
    b[n].is_null = &i.m_value_null;
    n++;
  }

  bool access::composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // m_value
    //
    {
      ::std::basic_string< char > const& v =
        o.m_value;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.m_value_value.capacity ());
      mysql::value_traits<
          ::std::basic_string< char >,
          mysql::id_string >::set_image (
        i.m_value_value,
        size,
        is_null,
        v);
      i.m_value_null = is_null;
      i.m_value_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_value_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_value
    //
    {
      ::std::basic_string< char >& v =
        o.m_value;

      mysql::value_traits<
          ::std::basic_string< char >,
          mysql::id_string >::set_value (
        v,
        i.m_value_value,
        i.m_value_size,
        i.m_value_null);
    }
  }

  // XmlQueryDocText
  //

  bool access::composite_value_traits< ::TR::Core::XmlQueryDocText, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // StringRestriction base
    //
    if (composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::grow (
          i, t + 0UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::XmlQueryDocText, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // StringRestriction base
    //
    composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::bind (b + n, i, sk);
    n += 1UL;
  }

  bool access::composite_value_traits< ::TR::Core::XmlQueryDocText, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // StringRestriction base
    //
    if (composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::init (i, o, sk))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::XmlQueryDocText, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // StringRestriction base
    //
    composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::init (o, i, db);
  }

  // XmlDefDocText
  //

  bool access::composite_value_traits< ::TR::Core::XmlDefDocText, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // StringRestriction base
    //
    if (composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::grow (
          i, t + 0UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::XmlDefDocText, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // StringRestriction base
    //
    composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::bind (b + n, i, sk);
    n += 1UL;
  }

  bool access::composite_value_traits< ::TR::Core::XmlDefDocText, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // StringRestriction base
    //
    if (composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::init (i, o, sk))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::XmlDefDocText, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // StringRestriction base
    //
    composite_value_traits< ::TR::Core::StringRestriction, id_mysql >::init (o, i, db);
  }

  // UUIDRestriction
  //

  bool access::composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_value
    //
    if (t[0UL])
    {
      i.m_value_value.capacity (i.m_value_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // m_value
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.m_value_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_value_value.capacity ());
    b[n].length = &i.m_value_size;
    b[n].is_null = &i.m_value_null;
    n++;
  }

  bool access::composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // m_value
    //
    {
      ::boost::uuids::uuid const& v =
        o.m_value;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.m_value_value.capacity ());
      mysql::value_traits<
          ::boost::uuids::uuid,
          mysql::id_blob >::set_image (
        i.m_value_value,
        size,
        is_null,
        v);
      i.m_value_null = is_null;
      i.m_value_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_value_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::UUIDRestriction, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_value
    //
    {
      ::boost::uuids::uuid& v =
        o.m_value;

      mysql::value_traits<
          ::boost::uuids::uuid,
          mysql::id_blob >::set_value (
        v,
        i.m_value_value,
        i.m_value_size,
        i.m_value_null);
    }
  }

  // KeyRestriction
  //

  bool access::composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_value
    //
    t[0UL] = 0;

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // m_value
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_value_value;
    b[n].is_null = &i.m_value_null;
    n++;
  }

  bool access::composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // m_value
    //
    {
      int const& v =
        o.m_value;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_value_value, is_null, v);
      i.m_value_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::TR::Core::KeyRestriction, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_value
    //
    {
      int& v =
        o.m_value;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.m_value_value,
        i.m_value_null);
    }
  }
}

#include <odb/post.hxx>
